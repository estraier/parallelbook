#! /usr/bin/env python3

import argparse
import itertools
import json
from pathlib import Path
import statistics
from xml.sax.saxutils import escape


CHAR_WIDTH_TABLE = {
  "A": 0.722, "B": 0.667, "C": 0.722, "D": 0.722, "E": 0.667, "F": 0.611, "G": 0.778,
  "H": 0.778, "I": 0.389, "J": 0.500, "K": 0.722, "L": 0.611, "M": 0.889, "N": 0.722,
  "O": 0.778, "P": 0.611, "Q": 0.778, "R": 0.722, "S": 0.556, "T": 0.667, "U": 0.722,
  "V": 0.722, "W": 1.000, "X": 0.722, "Y": 0.722, "Z": 0.667,
  "a": 0.444, "b": 0.500, "c": 0.444, "d": 0.500, "e": 0.444, "f": 0.333, "g": 0.500,
  "h": 0.500, "i": 0.278, "j": 0.278, "k": 0.500, "l": 0.278, "m": 0.778, "n": 0.500,
  "o": 0.500, "p": 0.500, "q": 0.500, "r": 0.333, "s": 0.389, "t": 0.278, "u": 0.500,
  "v": 0.500, "w": 0.722, "x": 0.500, "y": 0.500, "z": 0.444,
  "0": 0.500, "1": 0.500, "2": 0.500, "3": 0.500, "4": 0.500,
  "5": 0.500, "6": 0.500, "7": 0.500, "8": 0.500, "9": 0.500,
  " ": 0.278, "-": 0.333, ".": 0.250, ",": 0.250, ":": 0.278, ";": 0.278,
  "!": 0.333, "?": 0.500, "'": 0.191, "\"": 0.407, "(": 0.333, ")": 0.333,
  "[": 0.333, "]": 0.333, "/": 0.278, "\\": 0.278, "&": 0.778, "@": 0.920,
  "#": 0.500, "$": 0.500, "%": 0.833, "*": 0.500, "+": 0.564, "=": 0.564
}


def compute_line_width(line, font_size, is_bold, table,
                       inter_char_spacing=0.2, word_spacing=0.5):
  words = line.split()
  total_em = 0.0
  for word_index, word in enumerate(words):
    word_em = 0.0
    for i, ch in enumerate(word):
      em = table.get(ch, 0.5)
      if is_bold:
        em *= 1.1
      word_em += em
      if i < len(word) - 1:
        word_em += inter_char_spacing
    total_em += word_em
    if word_index < len(words) - 1:
      total_em += word_spacing
  return total_em * font_size


def balanced_wrap(text, width, font_size, is_bold, char_width_table):
  words = text.split()
  n = len(words)
  em_total = compute_line_width(text, 1.0, is_bold, char_width_table)
  estimated_line_count = max(1, round((em_total * font_size) / width))
  if estimated_line_count < 2:
    return [text]
  best_lines = None
  best_score = float('inf')
  weak_end_penalty = {
    "a": 9.0, "an": 9.0, "the": 9.0,
    "and": 3.0, "but": 3.0, "or": 3.0, "so": 3.0, "yet": 3.0,
    "in": 2.0, "on": 2.0, "at": 2.0, "by": 2.0, "to": 2.0, "of": 2.0,
    "for": 2.0, "with": 2.0, "about": 2.0, "against": 2.0,
    "between": 2.0, "into": 2.0, "through": 2.0, "during": 2.0,
    "before": 2.0, "after": 2.0, "above": 2.0, "below": 2.0,
    "from": 2.0, "up": 2.0, "down": 2.0, "off": 2.0, "over": 2.0,
    "under": 2.0, "around": 2.0, "near": 2.0, "outside": 2.0,
    "inside": 2.0, "without": 2.0, "within": 2.0,
  }
  for breaks in itertools.combinations(range(1, n), estimated_line_count - 1):
    indices = (0,) + breaks + (n,)
    lines = [" ".join(words[indices[i]:indices[i+1]]) for i in range(estimated_line_count)]
    line_widths = [compute_line_width(line, font_size, is_bold, char_width_table) for line in lines]
    penalty = 1.0
    for line in lines[:-1]:
      last_word = line.split()[-1].lower()
      penalty *= weak_end_penalty.get(last_word, 1.0)
    score = statistics.stdev(line_widths) / font_size + penalty
    if score < best_score:
      best_score = score
      best_lines = lines
  return best_lines


def make_cover_image_file(output_path, title, author):
  width = 1600
  height = 2250
  title_font_size = 120
  title_color = "#000000"
  author_font_size = 65
  author_color = "#111111"
  zigzag_color = "#bbccbb"
  logo_font_size = 50
  bg_color = "#eeffee"
  en_color = "#3355bb"
  ja_color = "#bb5533"
  ln_color = "#666666"
  title_lines = balanced_wrap(title, width * 0.8, title_font_size, True, CHAR_WIDTH_TABLE)
  title_line_height = title_font_size * 1.15
  total_title_block_height = title_line_height * len(title_lines)
  center_y = height * 0.40
  first_line_y = center_y - (total_title_block_height - title_line_height) / 2
  title_texts = "\n".join(
    f'<text x="50%" y="{first_line_y + i * title_line_height:.1f}" font-size="{title_font_size}" '
    f'font-weight="bold" text-anchor="middle" fill="{title_color}" font-family="serif">'
    f'{escape(line)}</text>'
    for i, line in enumerate(title_lines)
  )
  author_y = first_line_y + len(title_lines) * title_line_height + 20  # slight gap below title
  svg_content = f'''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg width="{width}" height="{height}" xmlns="http://www.w3.org/2000/svg">
<rect width="100%" height="100%" fill="{bg_color}" />
{title_texts}
<text x="50%" y="{author_y:.1f}" font-size="{author_font_size}" text-anchor="middle" fill="{author_color}" font-family="sans-serif">{escape(author)}</text>
<text x="50%" y="74%" font-size="{logo_font_size}" text-anchor="middle" fill="{ln_color}" font-family="fantasy">Parallel Book</text>
<g transform="translate(0, {0.035 * height}) scale({width / 1000}, -1)">
<path d="M0 5 L50 0 L100 5 L150 0 L200 5 L250 0 L300 5 L350 0 L400 5 L450 0 L500 5 L550 0 L600 5 L650 0 L700 5 L750 0 L800 5 L850 0 L900 5 L950 0 L1000 5" stroke="{zigzag_color}" fill="none" stroke-width="20"/>
</g>
<g transform="translate(0, {0.965 * height}) scale({width / 1000}, 1)">
<path d="M0 5 L50 0 L100 5 L150 0 L200 5 L250 0 L300 5 L350 0 L400 5 L450 0 L500 5 L550 0 L600 5 L650 0 L700 5 L750 0 L800 5 L850 0 L900 5 L950 0 L1000 5" stroke="{zigzag_color}" fill="none" stroke-width="20"/>
</g>
<g transform="translate({width / 2}, {height * 0.65}) scale(0.5)">
<g transform="translate(-400, -325)">
<path style="fill:{bg_color}; stroke:none;" d="M0 0L0 650L800 650L800 0L0 0z"/>
<path style="fill:{ln_color}; stroke:none;" d="M728 73L728 44C727.998 38.791 728.204 33.1844 723.786 29.5139C719.193 25.6978 711.543 27 706 27L662 27C596.782 27 528.05 35.9797 466 56.6667C450.763 61.7465 435.755 67.8136 421 74.1505C414.968 76.7409 406.639 82.566 400 82.5741C394.708 82.5805 388.742 78.4872 384 76.4244C372.105 71.2501 360.23 66.0488 348 61.6921C313.721 49.4808 277.811 42.2131 242 36.2469C200.537 29.3389 157.96 27 116 27C106.667 27 97.3328 26.9552 88 27.0008C83.2869 27.0238 77.913 27.2001 74.7029 31.2245C69.2212 38.097 72 52.7335 72 61C72 64.306 72.9813 69.8119 70.3966 72.3966C67.9708 74.8224 63.1008 73.9998 60 74C52.3357 74.0005 44.6635 73.897 37 74.0038C32.6742 74.0642 28.6822 74.6863 26.7029 79.0439C22.429 88.4535 25 102.891 25 113L25 189L25 456L25 563C25 571.325 24.7969 579.678 25.0147 588C25.119 591.989 25.7156 596.625 29.2245 599.142C32.2741 601.33 36.4479 600.994 40 601L59 601L137 601L291 601L342 601C350.557 601 359.484 600.268 368 601.105C381.983 602.479 386.305 621.48 400 621.863C408.367 622.096 412.738 614.184 418.015 609.04C424.144 603.065 429.601 601.003 438 601L686 601L748 601C754.378 601 766.568 603.301 771.566 598.486C774.375 595.781 773.994 591.565 774 588L774 566L774 473L774 186L774 108C774 102.01 773.812 95.9846 774.075 90C774.254 85.9219 774.938 80.8356 772.822 77.1088C770.177 72.4518 764.603 73.0018 760 73L728 73z"/>
<path style="fill:{bg_color}; stroke:none;" d="M390 582L390 231L390 138L390 113C390 109.801 390.78 105.224 388.972 102.39C386.502 98.5176 379.942 97.0678 376 95.2199C363.615 89.4136 350.838 84.6379 338 79.9468C296.294 64.7068 251.033 56.8971 207 52.1659C193.066 50.6687 178.849 50.394 165 48.5756C147.409 46.2659 128.751 47 111 47C106.913 47 95.8332 45.0612 93.0278 48.6034C91.3756 50.6895 92.0011 54.5308 92 57L92.1512 75.5756C92.1512 102.098 92.745 128.498 92.6752 155C92.4359 245.748 93 336.262 93 427L93 497L93 515C93.0046 517.236 92.532 520.508 94.0278 522.397C95.5833 524.361 98.7909 523.984 101 523.999L117 524C138.129 524.001 159.959 525.166 181 527.17C253.095 534.035 325.45 548.036 390 582M410 581C417.732 579.622 425.021 574.736 432 571.247C443.264 565.615 454.926 560.398 467 556.721C516.681 541.591 567.366 532.103 619 527.17C639.77 525.185 661.149 524.101 682 524.001L699 524C701.236 523.995 704.508 524.468 706.397 522.972C708.361 521.417 707.984 518.209 707.999 516C708.043 509.667 708 503.333 708 497L708 419L708 142L708 73L707.999 56C707.983 53.5818 708.268 50.4744 706.397 48.6034C703.008 45.2143 693.417 47 689 47C672.945 47 657.02 47.9938 641 48C619.68 48.0082 598.128 50.9401 577 53.7184C538.218 58.8181 499.799 65.7108 463 79.3187C450.195 84.054 437.423 89.1016 425 94.7693C420.505 96.8199 413.588 98.4871 411.028 103.105C409.188 106.423 410 111.346 410 115L410 140L410 235L410 581z"/>
<path style="fill:{ja_color}; stroke:none;" d="M541 90C540.638 94.5905 540.816 103.985 537.4 107.4C533.154 111.647 522.435 109.989 517 110C514.764 110.005 511.492 109.532 509.603 111.028C506.794 113.253 506.574 126.86 510.318 128.227C512.519 129.03 515.699 128.07 518 128.015C524.079 127.868 529.952 127.477 536 127C535.962 131.635 536.286 138.768 532.682 142.211C529.963 144.809 526.072 146.282 523 148.44C516.643 152.904 510.41 158.483 506.104 165C497.666 177.771 494.641 202.42 512 209.517C516.339 211.291 521.387 211.248 526 210.91C532.526 210.431 538.082 207.461 544 205L544 210C548.532 209.389 560.609 207.897 562.223 202.775C563.292 199.382 560.924 194.281 560 191C565.142 188.602 568.646 184.303 572.246 180C579.389 171.462 585.707 162.312 590 152C606.335 158.848 611.877 176.007 597.96 188.815C590.618 195.571 580.507 198.038 571 200C571.346 205.201 574.742 215.346 580.185 217.357C582.641 218.264 585.591 217.223 588 216.625C594.315 215.057 600.496 212.82 606 209.301C613.352 204.6 619.403 199.051 623.099 191C633.13 169.149 622.494 143.428 599 137C600.166 134.26 600.81 131.972 601 129C595.544 128.197 588.604 124.319 583.108 125.408C579.273 126.168 578.511 130.962 574.945 132.397C568.557 134.968 560.654 133.747 554 136C554.526 133.176 554.454 128.736 556.603 126.603C559.476 123.751 567.168 124.303 571 123.845C582.368 122.485 593.738 121.122 605 119L605 100C589.586 101.227 574.533 106.333 559 107C559.779 101.22 561.875 95.8795 562 90L541 90z"/>
<path style="fill:{bg_color}; stroke:none;" d="M728 94L728 430L728 512C728 520.262 730.994 535.473 723.786 541.347C718.318 545.804 708.577 544 702 544C684.438 544 666.471 543.507 649 545.17C602.998 549.547 558.049 553.864 513 565.127C496.316 569.298 478.648 572.682 463 580C468.951 582.497 477.58 581 484 581L529 581L686 581L737 581C740.938 581 751.254 582.829 753.972 579.397C755.772 577.125 755 572.693 755 570L755 547L755 455L755 222C755 179.228 757.363 135.605 754 93C745.459 94.5856 736.658 94 728 94M337 581C332.774 577.271 326.343 575.688 321 574.025C309.779 570.535 298.385 567.969 287 565.127C241.483 553.762 193.924 546.164 147 545.015C130.639 544.614 114.385 544 98 544C91.7158 544 82.6002 545.651 77.108 541.991C69.1939 536.717 72 522.131 72 514L72 435L72 204L72 132C72 119.799 70.1667 105.901 73 94L54 94C51.764 94.0046 48.492 93.5319 46.6034 95.0278C44.8638 96.4055 45.0421 99.0192 45.0046 101.001C44.9039 106.33 45 111.67 45 117L45 184L45 474L45 551L45 571C45.0011 573.469 44.3756 577.311 46.0278 579.397C48.8332 582.939 59.9132 581 64 581L118 581L337 581z"/>
<path style="fill:{en_color}; stroke:none;" d="M137 214L158 214C159.329 209.133 160.969 200.138 164.702 196.603C166.845 194.574 170.29 195.006 173 195L190 195C192.846 195.006 196.242 194.641 198.581 196.603C203.292 200.556 201.541 210.746 207.278 213.397C212.599 215.855 222.186 214 228 214C227.301 205.988 223.373 198.506 220.692 191C214.587 173.903 207.983 156.985 201.576 140C199.442 134.342 197.441 128.616 195.188 123.005C194.258 120.687 193.396 118.108 190.775 117.318C186.77 116.11 174.875 115.6 171.702 118.603C169.781 120.422 169.103 123.609 168.192 126L161.808 143C156.508 156.982 151.525 171.101 146 185C142.378 194.113 137.211 204.092 137 214M252 117L252 214L283 214C293.236 214 303.521 214.08 311.96 207.316C321.055 200.028 323.649 185.717 319.532 175C318.013 171.046 313.322 167.092 312.867 163C312.524 159.926 315.417 156.772 316.441 154C318.219 149.184 318.287 144.003 317.384 139C312.056 109.456 273.978 117 252 117z"/>
<path style="fill:{bg_color}; stroke:none;" d="M272.603 136.028C269.699 138.328 269.699 152.672 272.603 154.972C277.052 158.496 290.887 156.078 294.772 152.57C300.084 147.774 298.055 139.368 291.985 136.318C288.384 134.509 283.901 134.992 280 135C277.764 135.004 274.492 134.532 272.603 136.028M182 147C177.275 155.965 174.14 166.367 171 176L193 176C189.518 166.974 187.782 154.73 182 147M554 171C561.29 167.446 566.801 157.617 569 150C564.984 150.083 557.722 150.128 555.028 153.703C552.246 157.393 554 166.548 554 171M534 163C528.811 168.008 522.636 173.046 519.995 180C519.517 181.258 519.147 182.645 519.124 184C518.909 196.921 532.909 189.554 539 186C537.171 178.932 537.691 169.161 534 163M272.603 175.028C269.463 177.515 270.731 187.385 271.059 190.981C271.191 192.44 271.369 193.994 272.603 194.972C274.492 196.468 277.764 195.995 280 196C285.752 196.012 293.144 196.749 297.772 192.57C302.756 188.07 301.747 178.939 295.895 175.688C291.511 173.253 285.822 173.998 281 174C278.531 174.001 274.689 173.376 272.603 175.028z"/>
<path style="fill:{ja_color}; stroke:none;" d="M553 234C553 237.323 553.981 242.812 551.397 245.397C548.521 248.272 541.694 247 538 247L501 247L501 282C505.167 282 513.988 283.672 517.397 280.972C520.839 278.246 519 267.984 519 264L580 264C587.619 264 597.531 261.186 604.877 263.318C611.372 265.203 605.897 275.172 609.078 279.397C611.671 282.841 622.107 281 626 281L626 246L572 247C572.707 243.908 574.803 239.425 573.382 236.318C572.411 234.193 570.026 234.109 567.995 234.019C563.015 233.8 557.985 234 553 234z"/>
<path style="fill:{en_color}; stroke:none;" d="M226 271C224.576 263.64 218.803 257.681 212.996 253.239C192.078 237.238 156.833 244.923 143.465 267C131.719 286.396 134.592 317.067 151.039 332.907C170.478 351.627 206.713 349.064 222.427 327C227.636 319.687 218.523 312.282 211.093 311.566C206.687 311.142 203.007 318.168 199.996 320.671C194.284 325.418 187.282 326.9 180 325.674C151.795 320.928 150.012 279.298 173 266.916C180.945 262.637 191.765 262.777 199 268.394C202.4 271.033 205.777 277.199 210.09 278.183C214.849 279.269 221.948 273.134 226 271M251 247L251 344C270.448 344 293.934 347.668 311 336.25C338.807 317.646 337.622 269.231 308 252.904C291.197 243.642 269.468 247 251 247z"/>
<path style="fill:{bg_color}; stroke:none;" d="M271 266L271 325C280.75 325 290.792 325.753 298.999 319.468C314.175 307.847 314.893 281.174 297.985 270.468C289.563 265.136 280.538 266 271 266z"/>
<path style="fill:{ja_color}; stroke:none;" d="M524 271L524 288L572 288C567.543 293.036 563.865 295.919 557 296L557 307L501 307C501 310.969 499.447 319.139 502.028 322.397C504.468 325.478 512.524 324 516 324L556 324C556 328.65 557.533 336.66 554.972 340.721C551.107 346.853 537.063 343 531 343C531.281 348.422 533.829 356.729 538.61 359.973C540.605 361.327 543.683 361.266 546 361.576C553.18 362.535 565.035 363.165 570.606 357.606C578.079 350.147 575 333.574 575 324L626 324L626 307L578 307C582.427 303.395 586.715 299.617 591 295.845C594.937 292.379 605.19 286.392 606.118 280.961C607.864 270.741 594.014 271 588 271L545 271C537.884 271 531.065 271.888 524 271z"/>
<path style="fill:{en_color}; stroke:none;" d="M156 376L156 474L199 474C203.125 474 212 475.662 215.397 472.972C218.39 470.602 218.279 457.373 214.682 455.603C211.553 454.064 206.398 455 203 455L175 455L175 434L200 434C202.693 434 207.124 434.772 209.397 432.972C212.39 430.602 212.279 417.373 208.682 415.603C205.783 414.177 201.142 415 198 415L175 415L175 395L216 395L216 376L156 376M252 376L252 474L271 474L271 448C271 444.899 270.178 440.029 272.603 437.603C274.474 435.732 277.582 436.017 280 436.001L297 436C299.617 435.999 304.109 436.75 305.972 434.397C308.672 430.987 307 422.167 307 418L271 418L271 395L300 395C302.803 395 307.975 395.918 309.972 393.397C312.79 389.839 311 380.363 311 376L252 376z"/>
<path style="fill:{ja_color}; stroke:none;" d="M524 378C520.333 391.433 514.514 404.94 507.572 417C504.405 422.501 496.459 429.655 495.742 436C494.988 442.66 508.293 455.074 512 445C513.521 450.146 513 455.661 513 461L513 488C513 491.786 511.284 501.343 514.603 503.972C518.013 506.672 526.833 505 531 505L531 473C534.01 476.01 538.503 482.546 542.999 483.079C548.254 483.702 554.148 473.995 556 470C557.347 474.558 557 479.27 557 484L572 484C572 488.429 569.837 500.989 573.603 503.972C575.68 505.617 579.54 505.015 582 504.999C584.207 504.985 587.42 505.361 588.972 503.397C592.361 499.11 587.878 491.876 589.782 487.148C591.758 482.239 600.803 484 605 484L605 469C608.654 472.624 614.441 480.002 619.91 480.535C624.374 480.97 632.464 470.558 631.263 466.325C629.908 461.546 621.347 457.197 617.961 453.482C609.512 444.214 601.867 433.629 597 422L614 422C616.62 422 620.255 422.591 622.682 421.397C626.423 419.556 626.423 406.444 622.682 404.603C619.783 403.177 615.142 404 612 404C604.409 404 596.422 404.767 589 403C590.706 395.834 590.939 387.377 591 380C586.703 379.202 577.364 377.049 573.603 380.028C571.639 381.583 572.016 384.791 572.001 387L572 404L548 404C545.383 404.001 540.891 403.25 539.028 405.603C536.328 409.012 538 417.833 538 422L562 422C553.674 439.8 545.035 453.965 531 468L531 434C531 427.745 530.309 421.074 532.04 415C534.154 407.582 537.087 400.135 540.011 393C541.1 390.341 543.602 386.391 542.353 383.43C540.368 378.721 528.325 378.09 524 378z"/>
<path style="fill:{bg_color}; stroke:none;" d="M571 445C568.073 452.545 563.551 458.831 560 466L572 466C572 459.564 573.5 450.959 571 445M590 447C589.602 453.523 589.487 459.494 590 466L603 466C599.066 459.683 594.761 452.685 590 447z"/>
</g>
</g>
</svg>
'''
  output_path.write_text(svg_content, encoding="utf-8")


def main():
  parser = argparse.ArgumentParser(description="Generate SVG cover image for a book.")
  parser.add_argument("output", type=Path, help="Output SVG file path.")
  parser.add_argument("--title", default="Untitled")
  parser.add_argument("--author", default="Anonymous")
  parser.add_argument("--book", default=None)
  args = parser.parse_args()
  title = args.title
  author = args.author
  if args.book:
    with open(args.book, encoding="utf-8") as f:
      book = json.load(f)
      if "title" in book:
        title = book["title"]["source"]
      if "author" in book:
        author = book["author"]["source"]
  make_cover_image_file(args.output, title, author)


if __name__ == "__main__":
  main()
